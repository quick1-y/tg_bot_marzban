#domain/services/support_service.py
import logging
from typing import Optional, List
from datetime import datetime
from domain.models.support import SupportTicket
from infrastructure.database.repositories import SupportRepository
from core.config import config

logger = logging.getLogger(__name__)


class SupportService:
    MAX_OPEN_TICKETS = 3  # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def __init__(self, support_repository: SupportRepository):
        self.support_repository = support_repository

    # === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ===
    async def create_support_ticket(self, user_id: int, user_name: str, message: str) -> Optional[SupportTicket]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
        open_tickets_count = await self.support_repository.get_open_ticket_count(user_id)

        if open_tickets_count >= self.MAX_OPEN_TICKETS:
            logger.warning(f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤.")
            return None  # —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω

        ticket = SupportTicket(
            user_id=user_id,
            user_name=user_name,
            message=message,
            created_at=datetime.now()
        )

        saved_ticket = await self.support_repository.save_ticket(ticket)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç #{saved_ticket.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
        return saved_ticket


    # === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    async def get_user_tickets(self, user_id: int) -> List[SupportTicket]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.support_repository.get_tickets_by_user(user_id)

    # === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ ===
    async def get_ticket_details(self, ticket_id: int, user_id: int) -> Optional[SupportTicket]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return await self.support_repository.get_ticket_by_id(ticket_id, user_id)

    async def get_ticket_for_admin(self, ticket_id: int) -> Optional[SupportTicket]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ ID –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/—Å–∞–ø–ø–æ—Ä—Ç–∞"""
        return await self.support_repository.get_ticket_by_id_admin(ticket_id)

    async def get_all_tickets(self, limit: Optional[int] = None) -> List[SupportTicket]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        return await self.support_repository.get_all_tickets(limit=limit)

    # === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ ===
    async def format_ticket_list_for_user(self, tickets: List[SupportTicket]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not tickets:
            return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

        msg_lines = ["üì¨ –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n"]
        for t in tickets[:10]:
            status_emoji = "üü¢" if t.status == "open" else "üî¥"
            created_str = t.created_at.strftime("%d.%m %H:%M") if t.created_at else "?"
            msg_lines.append(f"{status_emoji} #{t.id} ‚Äî {t.message[:35]}... ({created_str})")
        msg_lines.append("\nüïπ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.")
        return "\n".join(msg_lines)

    # === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞ ===
    async def format_ticket_details(self, ticket: SupportTicket) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ"""
        status_emoji = "üü¢" if ticket.status == "open" else "üî¥"
        created = ticket.created_at.strftime("%d.%m.%Y %H:%M") if ticket.created_at else "?"
        updated = ticket.updated_at.strftime("%d.%m.%Y %H:%M") if ticket.updated_at else "?"

        msg = (
            f"üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user_name}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created}\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {ticket.status.upper()}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{ticket.message}\n\n"
        )

        if ticket.status == "open":
            msg += "‚åõ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞.\n"
        else:
            msg += "‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n"

        return msg

    # === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
    async def format_support_message_for_admin(self, user_id: int, user_name: str, message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        return (
            "üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    def get_support_contact_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        support_id = config.SUPPORT_TG_IDS
        if support_id:
            if len(support_id) == 1:
                return f"üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: tg://user?id={support_id[0]}"
            lines = ["üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:"]
            for index, contact_id in enumerate(support_id, start=1):
                lines.append(f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç {index}: tg://user?id={contact_id}")
            return "\n".join(lines)
        return "üìû –î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"

    # === –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ ===
    async def close_ticket(self, ticket_id: int) -> bool:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç"""
        return await self.support_repository.update_ticket_status(ticket_id, "closed")

    async def reopen_ticket(self, ticket_id: int) -> bool:
        """–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç"""
        return await self.support_repository.update_ticket_status(ticket_id, "open")

    async def update_ticket_status(self, ticket_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ"""
        return await self.support_repository.update_ticket_status(ticket_id, status)

    async def add_ticket_response(self, ticket_id: int, response: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        return await self.support_repository.update_ticket_response(ticket_id, response)

