# presentation/handlers/admin_handlers.py
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from presentation.handlers.base import BaseHandler
from presentation.keyboards import (
    get_admin_main_keyboard,
    get_admin_users_keyboard,
    get_pagination_keyboard,
    get_support_tickets_keyboard
)
from infrastructure.marzban.api_client import MarzbanAPIClient
from domain.services.support_service import SupportService
from core.security import (
    is_admin,
    is_support,
    can_access_support_tickets,
    can_access_admin_panel
)
from core.config import config
import logging

logger = logging.getLogger(__name__)


class AdminHandlers(BaseHandler):
    def __init__(self, marzban_client: MarzbanAPIClient, support_service: SupportService):
        self.marzban_client = marzban_client
        self.support_service = support_service
        super().__init__()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.router.message.register(self.admin_panel, Command("admin"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("admin_"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("users_"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("admins_"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("support_"))

    async def admin_panel(self, message: Message):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not can_access_admin_panel(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Marzban",
            reply_markup=get_admin_main_keyboard()
        )

    async def admin_callback_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback'–æ–≤
        data = callback.data

        if data.startswith("admin_"):
            # –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –∞–¥–º–∏–Ω –∏–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç
            if data == "admin_support_tickets":
                if not can_access_support_tickets(user_id):
                    await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏", show_alert=True)
                    return
            # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            elif not can_access_admin_panel(user_id):
                await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return

        if data in ["admin_stats", "admin_admins", "admin_users", "admin_nodes"] and not self._is_admin(user_id):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
            return

        try:
            if data == "admin_stats":
                await self._show_system_stats(callback)
            elif data == "admin_users":
                await self._show_users_menu(callback)
            elif data == "admin_admins":
                await self._show_admins_list(callback, 0)
            elif data == "admin_nodes":
                await self._show_nodes_list(callback)
            elif data == "admin_support_tickets":
                await self._show_support_tickets_menu(callback)
            elif data == "admin_back":
                await callback.message.edit_text(
                    "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Marzban",
                    reply_markup=get_admin_main_keyboard()
                )
            elif data.startswith("users_list"):
                await self._show_users_list(callback, 0)
            elif data.startswith("users_page_"):
                page = int(data.split("_")[2])
                await self._show_users_list(callback, page)
            elif data.startswith("admins_page_"):
                page = int(data.split("_")[2])
                await self._show_admins_list(callback, page)
            elif data.startswith("support_"):
                await self._handle_support_callbacks(callback, data)
        except Exception as e:
            logger.error(f"Error in admin callback handler: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def _show_support_tickets_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            user_id = callback.from_user.id
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
            user_tickets = await self.support_service.get_user_tickets(user_id)
            total_tickets = len(user_tickets)
            open_tickets = len([t for t in user_tickets if t.status == "open"])

            message = (
                "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
                f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
                f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {total_tickets - open_tickets}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        except Exception as e:
            logger.error(f"Error showing support tickets menu: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}"
            )

    async def _handle_support_callbacks(self, callback: CallbackQuery, data: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if data == "support_tickets_list":
            await self._show_support_tickets_list(callback)
        elif data == "support_ticket_search":
            await callback.answer("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        elif data == "support_tickets_stats":
            await self._show_support_tickets_stats(callback)
        else:
            await callback.answer("‚è≥ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _show_support_tickets_list(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            user_id = callback.from_user.id
            user_tickets = await self.support_service.get_user_tickets(user_id)

            if not user_tickets:
                await callback.message.edit_text(
                    "üì≠ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                )
                return

            message = "üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"

            for i, ticket in enumerate(user_tickets[:10], 1):
                status_icon = "üü¢" if ticket.status == "open" else "üî¥"
                created_date = ticket.created_at.strftime("%d.%m.%Y %H:%M") if ticket.created_at else "N/A"
                message += (
                    f"{status_icon} **–¢–∏–∫–µ—Ç #{ticket.id}**\n"
                    f"üìÖ {created_date}\n"
                    f"üìù {ticket.message[:50]}...\n"
                    f"üë§ {ticket.user_name}\n\n"
                )

            if len(user_tickets) > 10:
                message += f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(user_tickets)} —Ç–∏–∫–µ—Ç–æ–≤\n\n"

            message += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ ID"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

        except Exception as e:
            logger.error(f"Error showing support tickets list: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

    async def _show_support_tickets_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤"""
        try:
            user_id = callback.from_user.id
            user_tickets = await self.support_service.get_user_tickets(user_id)

            total_tickets = len(user_tickets)
            open_tickets = len([t for t in user_tickets if t.status == "open"])
            closed_tickets = total_tickets - open_tickets

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            from collections import defaultdict
            monthly_stats = defaultdict(int)
            for ticket in user_tickets:
                if ticket.created_at:
                    month_key = ticket.created_at.strftime("%Y-%m")
                    monthly_stats[month_key] += 1

            message = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
                f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
                f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}\n"
            )

            if total_tickets > 0:
                message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets / total_tickets * 100:.1f}%\n\n"
            else:
                message += "\n"

            if monthly_stats:
                message += "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:**\n"
                for month, count in sorted(monthly_stats.items())[-6:]:
                    message += f"‚Ä¢ {month}: {count} —Ç–∏–∫–µ—Ç–æ–≤\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

        except Exception as e:
            logger.error(f"Error showing support tickets stats: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def _show_system_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.marzban_client.get_system_stats()

            cores = stats.get('cores', 1)
            cpu_usage = stats.get('cpu_usage', 0)
            ram_usage = stats.get('ram_usage', 0)
            ram_total = stats.get('ram_total', 1)
            ram_usage_percent = (ram_usage / ram_total) * 100

            message = (
                "üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üñ•Ô∏è **–¶–ü:** {cores} —è–¥–µ—Ä\n"
                f"üìà **–ó–∞–≥—Ä—É–∑–∫–∞ –¶–ü:** {cpu_usage:.1f}%\n"
                f"üíæ **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–ó–£:** {ram_usage / 1024 / 1024:.1f} –ú–ë ({ram_usage_percent:.1f}%)\n"
                f"üÜì **–î–æ—Å—Ç—É–ø–Ω–æ –û–ó–£:** {(ram_total - ram_usage) / 1024 / 1024:.1f} –ú–ë\n"
                f"üîΩ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞:** {stats.get('total_traffic', 0) / (1024 ** 3):.2f} –ì–ë\n\n"
                f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats.get('total_users', 0)}\n"
                f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats.get('active_users', 0)}\n"
                f"‚è∏Ô∏è **–í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è:** {stats.get('on_hold_users', 0)}\n"
                f"üî¥ **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats.get('disabled_users', 0)}"
            )

            await callback.message.edit_text(message, parse_mode="Markdown")

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def _show_users_menu(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        await callback.message.edit_text(
            "üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_users_keyboard()
        )

    async def _show_users_list(self, callback: CallbackQuery, page: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            users = await self.marzban_client.get_users(page * config.USERS_PER_PAGE, config.USERS_PER_PAGE)
            total_users = len(users)

            if not users:
                await callback.message.edit_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            message = "üë§ **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            for i, user in enumerate(users, start=1):
                status_icon = "üü¢" if user.get('status', 'active') == 'active' else "üî¥"
                message += f"{status_icon} `{user.get('username', 'N/A')}`\n"

            total_pages = max(1, (total_users + config.USERS_PER_PAGE - 1) // config.USERS_PER_PAGE)
            pagination_keyboard = get_pagination_keyboard(page, total_pages, "users")

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=pagination_keyboard
            )

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    async def _show_admins_list(self, callback: CallbackQuery, page: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            admins = await self.marzban_client.get_admins(page * config.ADMINS_PER_PAGE, config.ADMINS_PER_PAGE)

            message = "üë®‚Äçüíº **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤**\n\n"
            for admin in admins:
                role = "üîß –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if admin.get('is_sudo', False) else "üë§ –ê–¥–º–∏–Ω"
                message += f"{role}: `{admin.get('username', 'N/A')}`\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown"
            )

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")

    async def _show_nodes_list(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É–∑–ª–æ–≤"""
        try:
            nodes = await self.marzban_client.get_nodes()

            message = "üåê **–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤**\n\n"
            for node in nodes:
                status = "üü¢ –û–Ω–ª–∞–π–Ω" if node.get('status', 'healthy') == 'healthy' else "üî¥ –û—Ñ–ª–∞–π–Ω"
                message += f"{status} {node.get('name', 'N/A')}\n"
                message += f"   üìç {node.get('address', 'N/A')}\n"
                message += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {node.get('user_count', 0)}\n\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown"
            )

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤: {str(e)}")