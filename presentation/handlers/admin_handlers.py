# presentation/handlers/admin_handlers.py
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from presentation.handlers.base import BaseHandler
from presentation.keyboards import (
    get_admin_main_keyboard,
    get_admin_users_keyboard,
    get_admin_admins_keyboard,
    get_support_tickets_keyboard,
    get_support_tickets_pagination_keyboard,
    get_support_ticket_search_keyboard,
    get_admin_ticket_actions_keyboard,
    get_confirmation_keyboard,
)
from infrastructure.marzban.api_client import MarzbanAPIClient
from domain.services.support_service import SupportService
from domain.services.user_service import UserService
from core.security import (
    is_admin,
    is_support,
    can_access_support_tickets,
    can_access_admin_panel
)
from core.config import config
import logging
import html
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any

logger = logging.getLogger(__name__)


class SupportTicketStates(StatesGroup):
    waiting_for_ticket_id = State()
    waiting_for_reply_message = State()


class AdminCreationStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_password = State()
    waiting_for_is_sudo = State()
    waiting_for_telegram_id = State()


class AdminEditStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_is_sudo = State()
    waiting_for_telegram_id = State()


class AdminSearchStates(StatesGroup):
    waiting_for_username = State()


class UserCreationStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_limit = State()
    waiting_for_reset_strategy = State()
    waiting_for_expire = State()
    waiting_for_note = State()


class UserEditStates(StatesGroup):
    waiting_for_status = State()
    waiting_for_limit = State()
    waiting_for_reset_strategy = State()
    waiting_for_expire = State()
    waiting_for_note = State()


class UserSearchStates(StatesGroup):
    waiting_for_username = State()


class MassOperationStates(StatesGroup):
    waiting_for_hours = State()
    waiting_for_traffic = State()
    waiting_for_broadcast_message = State()


class AdminHandlers(BaseHandler):
    RESET_STRATEGIES = {
        "no_reset": "–±–µ–∑ —Å–±—Ä–æ—Å–∞",
        "daily": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "weekly": "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        "monthly": "–µ–∂–µ–º–µ—Å—è—á–Ω–æ",
    }

    STATUS_CHOICES = {
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–π",
        "on_hold": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "disabled": "–û—Ç–∫–ª—é—á–µ–Ω",
    }

    def __init__(self, marzban_client: MarzbanAPIClient, support_service: SupportService, user_service: UserService):
        self.marzban_client = marzban_client
        self.support_service = support_service
        self.user_service = user_service
        self.users_page_limit = max(1, config.USERS_PER_PAGE)
        self.admins_page_limit = max(1, config.ADMINS_PER_PAGE)
        super().__init__()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.router.message.register(self.admin_panel, Command("admin"))
        # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.router.message.register(self._process_admin_search_input, AdminSearchStates.waiting_for_username)
        self.router.message.register(self._process_new_admin_username, AdminCreationStates.waiting_for_username)
        self.router.message.register(self._process_new_admin_password, AdminCreationStates.waiting_for_password)
        self.router.message.register(self._process_new_admin_is_sudo, AdminCreationStates.waiting_for_is_sudo)
        self.router.message.register(self._process_new_admin_telegram, AdminCreationStates.waiting_for_telegram_id)
        self.router.message.register(self._process_admin_edit_password, AdminEditStates.waiting_for_password)
        self.router.message.register(self._process_admin_edit_is_sudo, AdminEditStates.waiting_for_is_sudo)
        self.router.message.register(self._process_admin_edit_telegram, AdminEditStates.waiting_for_telegram_id)
        self.router.message.register(self._process_user_search_input, UserSearchStates.waiting_for_username)
        self.router.message.register(self._process_new_user_username, UserCreationStates.waiting_for_username)
        self.router.message.register(self._process_new_user_limit, UserCreationStates.waiting_for_limit)
        self.router.message.register(self._process_new_user_reset_strategy, UserCreationStates.waiting_for_reset_strategy)
        self.router.message.register(self._process_new_user_expire, UserCreationStates.waiting_for_expire)
        self.router.message.register(self._process_new_user_note, UserCreationStates.waiting_for_note)
        self.router.message.register(self._process_user_edit_status, UserEditStates.waiting_for_status)
        self.router.message.register(self._process_user_edit_limit, UserEditStates.waiting_for_limit)
        self.router.message.register(self._process_user_edit_reset_strategy, UserEditStates.waiting_for_reset_strategy)
        self.router.message.register(self._process_user_edit_expire, UserEditStates.waiting_for_expire)
        self.router.message.register(self._process_user_edit_note, UserEditStates.waiting_for_note)
        self.router.message.register(self._process_mass_hours_input, MassOperationStates.waiting_for_hours)
        self.router.message.register(self._process_mass_traffic_input, MassOperationStates.waiting_for_traffic)
        self.router.message.register(self._process_broadcast_message, MassOperationStates.waiting_for_broadcast_message)
        self.router.message.register(self._process_ticket_search_input, SupportTicketStates.waiting_for_ticket_id)
        self.router.message.register(self._process_ticket_reply_message, SupportTicketStates.waiting_for_reply_message)
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("admin_"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("users_"))
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("admins_"))
        self.router.callback_query.register(self._cancel_support_action, F.data == "support_ticket_cancel")
        self.router.callback_query.register(self.admin_callback_handler, F.data.startswith("support_"))

    async def admin_panel(self, message: Message):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not can_access_admin_panel(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Marzban",
            reply_markup=get_admin_main_keyboard()
        )

    @staticmethod
    def _is_cancel_message(text: Optional[str]) -> bool:
        if not text:
            return False
        return text.strip().lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"}

    @staticmethod
    def _extract_page_from_callback(data: str, default: int = 0) -> int:
        parts = data.split(":")
        if len(parts) > 1 and parts[-1].isdigit():
            return max(0, int(parts[-1]))
        return default

    @staticmethod
    def _extract_username_and_page(data: str, default_page: int = 0) -> tuple[str, int]:
        parts = data.split(":")
        username = parts[1] if len(parts) > 1 else ""
        page = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else default_page
        return username, max(0, page)

    @staticmethod
    def _split_username_page(payload: str) -> tuple[str, int]:
        if ":" in payload:
            username, page_str = payload.split(":", maxsplit=1)
            if page_str.isdigit():
                return username, int(page_str)
        return payload, 0

    @staticmethod
    def _format_data_limit(limit: Optional[int]) -> str:
        if not limit:
            return "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        return f"{limit / (1024 ** 3):.2f} –ì–ë"

    @staticmethod
    def _format_expire(expire: Optional[int]) -> str:
        if not expire:
            return "–ë–µ–∑ —Å—Ä–æ–∫–∞"
        try:
            dt = datetime.fromtimestamp(expire)
        except (ValueError, OSError):
            return str(expire)
        return dt.strftime("%d.%m.%Y %H:%M")

    @staticmethod
    def _parse_data_limit_input(text: str) -> Optional[int]:
        cleaned = text.strip().replace(",", ".")
        if cleaned.lower() in {"0", "–±–µ–∑–ª–∏–º–∏—Ç", "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–Ω–µ—Ç", "none", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            return 0
        value = float(cleaned)
        if value < 0:
            raise ValueError("negative")
        return int(value * (1024 ** 3))

    @staticmethod
    def _parse_expire_input(text: str) -> Optional[int]:
        cleaned = text.strip()
        if cleaned.lower() in {"0", "–±–µ–∑–ª–∏–º–∏—Ç", "–±–µ–∑ —Å—Ä–æ–∫–∞", "–Ω–µ—Ç", "none", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            return None

        formats = [
            "%d.%m.%Y %H:%M",
            "%d.%m.%Y",
            "%Y-%m-%d %H:%M",
            "%Y-%m-%d",
            "%d.%m.%Y %H:%M:%S",
        ]

        for fmt in formats:
            try:
                dt = datetime.strptime(cleaned, fmt)
                return int(dt.timestamp())
            except ValueError:
                continue

        if cleaned.isdigit():
            return int(cleaned)

        raise ValueError("invalid date")

    @classmethod
    def _format_reset_strategy(cls, strategy: Optional[str]) -> str:
        if not strategy:
            return cls.RESET_STRATEGIES.get("no_reset", "–ë–µ–∑ —Å–±—Ä–æ—Å–∞")
        return cls.RESET_STRATEGIES.get(strategy, strategy)

    @classmethod
    def _format_status(cls, status: Optional[str]) -> str:
        if not status:
            return cls.STATUS_CHOICES.get("active", "–ê–∫—Ç–∏–≤–Ω—ã–π")
        return cls.STATUS_CHOICES.get(status, status)

    @staticmethod
    def _parse_bool_input(text: str, current: Optional[bool] = None) -> Optional[bool]:
        cleaned = text.strip().lower()
        if cleaned in {"–¥–∞", "yes", "true", "1", "–∞–≥–∞", "y", "sudo"}:
            return True
        if cleaned in {"–Ω–µ—Ç", "no", "false", "0", "n"}:
            return False
        if cleaned in {"skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–æ—Å—Ç–∞–≤–∏—Ç—å", "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"}:
            return current
        raise ValueError("invalid bool")

    async def _cancel_operation(self, message: Message, state: FSMContext, menu: str = "users"):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ FSM-–¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        if menu == "admins":
            await message.answer(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_admin_admins_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_admin_users_keyboard()
            )

    async def admin_callback_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback'–æ–≤
        data = callback.data

        if data.startswith("admin_"):
            # –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –∞–¥–º–∏–Ω –∏–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç
            if data == "admin_support_tickets":
                if not can_access_support_tickets(user_id):
                    await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏", show_alert=True)
                    return
            # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            elif not can_access_admin_panel(user_id):
                await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return

        if data in ["admin_stats", "admin_admins", "admin_users", "admin_nodes"] and not is_admin(user_id):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
            return

        try:
            if data == "admin_stats":
                await self._show_system_stats(callback)
            elif data == "admin_users":
                await state.clear()
                await self._show_users_menu(callback)
            elif data == "admin_admins":
                await state.clear()
                await self._show_admins_menu(callback)
            elif data == "admin_nodes":
                await self._show_nodes_list(callback)
            elif data == "admin_support_tickets":
                await state.clear()
                await self._show_support_tickets_menu(callback)
            elif data == "admin_back":
                await state.clear()
                await callback.message.edit_text(
                    "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Marzban",
                    reply_markup=get_admin_main_keyboard()
                )
            elif data.startswith("users_list:"):
                page = self._extract_page_from_callback(data)
                await state.clear()
                await self._show_users_list(callback, page)
            elif data.startswith("users_view:"):
                username, page = self._extract_username_and_page(data)
                await state.clear()
                await self._show_user_details(callback, username, page)
            elif data.startswith("users_edit:"):
                username, page = self._extract_username_and_page(data)
                await state.clear()
                await self._start_user_edit(callback, state, username, page)
            elif data.startswith("users_delete:"):
                username, page = self._extract_username_and_page(data)
                await self._confirm_user_deletion(callback, state, username, page)
            elif data.startswith("confirm_delete_user_"):
                payload = data[len("confirm_delete_user_"):]
                username, page = self._split_username_page(payload)
                await self._delete_user(callback, state, username, page)
            elif data == "cancel_delete_user":
                await self._cancel_delete_user(callback, state)
            elif data == "users_search":
                await state.set_state(UserSearchStates.waiting_for_username)
                await callback.message.edit_text(
                    "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª):"
                )
                await callback.answer()
            elif data == "user_add":
                await state.clear()
                await self._start_user_creation(callback, state)
            elif data == "users_add_time":
                await state.set_state(MassOperationStates.waiting_for_hours)
                await callback.message.edit_text(
                    "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–µ—Å—è—á–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º (–∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª):"
                )
                await callback.answer()
            elif data == "users_add_data":
                await state.set_state(MassOperationStates.waiting_for_traffic)
                await callback.message.edit_text(
                    "üíΩ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ë, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º (–∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª):"
                )
                await callback.answer()
            elif data == "users_broadcast":
                await state.set_state(MassOperationStates.waiting_for_broadcast_message)
                await callback.message.edit_text(
                    "üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª):"
                )
                await callback.answer()
            elif data.startswith("admins_list:"):
                page = self._extract_page_from_callback(data)
                await state.clear()
                await self._show_admins_list(callback, page)
            elif data == "admins_search":
                await state.set_state(AdminSearchStates.waiting_for_username)
                await callback.message.edit_text(
                    "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª):",
                    reply_markup=None
                )
                await callback.answer()
            elif data == "admins_add":
                await state.clear()
                await self._start_admin_creation(callback, state)
            elif data.startswith("admin_manage:"):
                username, page = self._extract_username_and_page(data)
                await state.clear()
                await self._show_admin_details(callback, username, page)
            elif data.startswith("admins_edit:"):
                username, page = self._extract_username_and_page(data)
                await state.clear()
                await self._start_admin_edit(callback, state, username, page)
            elif data.startswith("admins_delete:"):
                username, page = self._extract_username_and_page(data)
                await self._confirm_admin_deletion(callback, state, username, page)
            elif data.startswith("confirm_delete_admin_"):
                username = data[len("confirm_delete_admin_"):]
                await self._delete_admin(callback, state, username)
            elif data == "cancel_delete_admin":
                await self._cancel_delete_admin(callback, state)
            elif data.startswith("support_"):
                await self._handle_support_callbacks(callback, data, state)
        except Exception as e:
            logger.error(f"Error in admin callback handler: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def _show_support_tickets_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            user_id = callback.from_user.id
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
            user_tickets = await self.support_service.get_user_tickets(user_id)
            total_tickets = len(user_tickets)
            open_tickets = len([t for t in user_tickets if t.status == "open"])

            message = (
                "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
                f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
                f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {total_tickets - open_tickets}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        except Exception as e:
            logger.error(f"Error showing support tickets menu: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}"
            )

    async def _handle_support_callbacks(self, callback: CallbackQuery, data: str, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if data.startswith("support_tickets_list"):
            parts = data.split(":", maxsplit=1)
            offset = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
            await self._show_support_tickets_list(callback, offset)
        elif data == "support_ticket_search":
            await state.set_state(SupportTicketStates.waiting_for_ticket_id)
            await state.update_data(origin_message_id=callback.message.message_id)
            await callback.message.edit_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ ID —Ç–∏–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å:",
                reply_markup=get_support_ticket_search_keyboard()
            )
            await callback.answer()
        elif data == "support_tickets_stats":
            await self._show_support_tickets_stats(callback)
        elif data.startswith("support_ticket_toggle:"):
            await self._toggle_ticket_status(callback, data)
        elif data.startswith("support_ticket_reply:"):
            await self._start_ticket_reply(callback, data, state)
        else:
            await callback.answer("‚è≥ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _show_support_tickets_list(self, callback: CallbackQuery, offset: int = 0):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            user_id = callback.from_user.id
            user_tickets = await self.support_service.get_user_tickets(user_id)

            if not user_tickets:
                await callback.message.edit_text(
                    "üì≠ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                )
                return

            total_tickets = len(user_tickets)
            page_size = 10
            offset = max(offset, 0)

            if offset >= total_tickets:
                offset = max(total_tickets - page_size, 0)

            current_slice = user_tickets[offset:offset + page_size]

            message = "üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"

            for ticket in current_slice:
                status_icon = "üü¢" if ticket.status == "open" else "üî¥"
                created_date = ticket.created_at.strftime("%d.%m.%Y %H:%M") if ticket.created_at else "N/A"
                preview = ticket.message or ""
                preview = (preview[:50] + "...") if len(preview) > 50 else preview
                message += (
                    f"{status_icon} **–¢–∏–∫–µ—Ç #{ticket.id}**\n"
                    f"üìÖ {created_date}\n"
                    f"üìù {preview}\n"
                    f"üë§ {ticket.user_name}\n\n"
                )

            if current_slice:
                start_number = offset + 1
                end_number = offset + len(current_slice)
                message += f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–∏–∫–µ—Ç—ã {start_number}‚Äì{end_number} –∏–∑ {total_tickets}\n\n"
            else:
                message += "‚ÑπÔ∏è –ë–æ–ª—å—à–µ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç\n\n"

            message += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ ID"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_pagination_keyboard(offset, total_tickets, page_size)
            )

        except Exception as e:
            logger.error(f"Error showing support tickets list: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

    async def _show_support_tickets_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤"""
        try:
            user_id = callback.from_user.id
            user_tickets = await self.support_service.get_user_tickets(user_id)

            total_tickets = len(user_tickets)
            open_tickets = len([t for t in user_tickets if t.status == "open"])
            closed_tickets = total_tickets - open_tickets

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            from collections import defaultdict
            monthly_stats = defaultdict(int)
            for ticket in user_tickets:
                if ticket.created_at:
                    month_key = ticket.created_at.strftime("%Y-%m")
                    monthly_stats[month_key] += 1

            message = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
                f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
                f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}\n"
            )

            if total_tickets > 0:
                message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets / total_tickets * 100:.1f}%\n\n"
            else:
                message += "\n"

            if monthly_stats:
                message += "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:**\n"
                for month, count in sorted(monthly_stats.items())[-6:]:
                    message += f"‚Ä¢ {month}: {count} —Ç–∏–∫–µ—Ç–æ–≤\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

        except Exception as e:
            logger.error(f"Error showing support tickets stats: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=get_support_tickets_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            )

    async def _cancel_support_action(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∏–∫–µ—Ç–æ–º"""
        await state.clear()
        await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await self._show_support_tickets_menu(callback)

    async def _toggle_ticket_status(self, callback: CallbackQuery, data: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞"""
        if not can_access_support_tickets(callback.from_user.id):
            await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        parts = data.split(":")
        if len(parts) != 3 or not parts[1].isdigit():
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        ticket_id = int(parts[1])
        new_status = parts[2]

        if new_status not in {"open", "closed"}:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert=True)
            return

        success = await self.support_service.update_ticket_status(ticket_id, new_status)
        if not success:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
            return

        ticket = await self.support_service.get_ticket_for_admin(ticket_id)
        if not ticket:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        await callback.message.edit_text(
            self._format_ticket_details_for_admin(ticket),
            parse_mode="HTML",
            reply_markup=get_admin_ticket_actions_keyboard(ticket.id, ticket.status == "open")
        )

    async def _start_ticket_reply(self, callback: CallbackQuery, data: str, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not can_access_support_tickets(callback.from_user.id):
            await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        parts = data.split(":")
        if len(parts) < 2 or not parts[1].isdigit():
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞", show_alert=True)
            return

        ticket_id = int(parts[1])
        ticket = await self.support_service.get_ticket_for_admin(ticket_id)
        if not ticket:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await state.set_state(SupportTicketStates.waiting_for_reply_message)
        await state.update_data(ticket_id=ticket_id, origin_message_id=callback.message.message_id)

        await callback.answer()
        await callback.message.answer(
            (
                f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞ #{ticket_id}.\n"
                "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."
            ),
            reply_markup=get_support_ticket_search_keyboard()
        )

    async def _process_ticket_search_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID —Ç–∏–∫–µ—Ç–∞"""
        if not can_access_support_tickets(message.from_user.id):
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            await state.clear()
            return

        ticket_id_text = message.text.strip().lstrip("#")
        if not ticket_id_text.isdigit():
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
            return

        ticket_id = int(ticket_id_text)
        ticket = await self.support_service.get_ticket_for_admin(ticket_id)
        if not ticket:
            await message.answer(f"‚ùå –¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        state_data = await state.get_data()
        origin_message_id = state_data.get("origin_message_id")
        reply_markup = get_admin_ticket_actions_keyboard(ticket.id, ticket.status == "open")
        ticket_text = self._format_ticket_details_for_admin(ticket)

        await state.clear()

        if origin_message_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=origin_message_id,
                    text=ticket_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º: {e}")
                await message.answer(ticket_text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await message.answer(ticket_text, parse_mode="HTML", reply_markup=reply_markup)

    async def _process_ticket_reply_message(self, message: Message, state: FSMContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞"""
        if not can_access_support_tickets(message.from_user.id):
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            await state.clear()
            return

        reply_text = (message.text or "").strip()
        if not reply_text:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        state_data = await state.get_data()
        ticket_id = state_data.get("ticket_id")
        origin_message_id = state_data.get("origin_message_id")

        if not ticket_id:
            await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        ticket = await self.support_service.get_ticket_for_admin(ticket_id)
        if not ticket:
            await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            await state.clear()
            return

        try:
            await message.bot.send_message(
                chat_id=ticket.user_id,
                text=(
                    f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.id}\n\n"
                    f"{reply_text}"
                )
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        saved = await self.support_service.add_ticket_response(ticket_id, reply_text)
        if not saved:
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        updated_ticket = await self.support_service.get_ticket_for_admin(ticket_id)
        reply_markup = None
        ticket_text = ""
        if updated_ticket:
            reply_markup = get_admin_ticket_actions_keyboard(
                updated_ticket.id,
                updated_ticket.status == "open"
            )
            ticket_text = self._format_ticket_details_for_admin(updated_ticket)

        await state.clear()

        if origin_message_id and ticket_text:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=origin_message_id,
                    text=ticket_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
                if ticket_text:
                    await message.answer(ticket_text, parse_mode="HTML", reply_markup=reply_markup)
        elif ticket_text:
            await message.answer(ticket_text, parse_mode="HTML", reply_markup=reply_markup)

    async def _process_new_user_username(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        username = text.strip()
        if not username:
            await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        try:
            existing = await self.marzban_client.get_user(username)
            if existing:
                await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            return

        data = await state.get_data()
        new_user = data.get("new_user", {})
        new_user.update({"username": username})
        await state.update_data(new_user=new_user)
        await state.set_state(UserCreationStates.waiting_for_limit)
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ì–ë (0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
        )

    async def _process_new_user_limit(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        try:
            limit_bytes = self._parse_data_limit_input(text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50 –∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")
            return

        data = await state.get_data()
        new_user = data.get("new_user", {})
        new_user["data_limit"] = limit_bytes

        if limit_bytes == 0:
            new_user["data_limit_reset_strategy"] = "no_reset"
            await state.update_data(new_user=new_user)
            await state.set_state(UserCreationStates.waiting_for_expire)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n"
                "–£–∫–∞–∂–∏—Ç–µ 0, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è."
            )
            return

        await state.update_data(new_user=new_user)
        await state.set_state(UserCreationStates.waiting_for_reset_strategy)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (daily/weekly/monthly/no_reset) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")

    async def _process_new_user_reset_strategy(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        cleaned = text.strip().lower()
        strategy_map = {
            "daily": "daily",
            "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily",
            "weekly": "weekly",
            "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "weekly",
            "monthly": "monthly",
            "–µ–∂–µ–º–µ—Å—è—á–Ω–æ": "monthly",
            "no_reset": "no_reset",
            "–±–µ–∑ —Å–±—Ä–æ—Å–∞": "no_reset",
            "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å": None,
            "skip": None,
        }

        strategy = strategy_map.get(cleaned)
        if strategy is None and cleaned not in {"", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: daily, weekly, monthly, no_reset –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return

        data = await state.get_data()
        new_user = data.get("new_user", {})
        if strategy:
            new_user["data_limit_reset_strategy"] = strategy
        elif "data_limit_reset_strategy" not in new_user:
            new_user["data_limit_reset_strategy"] = "no_reset"

        await state.update_data(new_user=new_user)
        await state.set_state(UserCreationStates.waiting_for_expire)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n"
            "–£–∫–∞–∂–∏—Ç–µ 0, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è."
        )

    async def _process_new_user_expire(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        try:
            expire_value = self._parse_expire_input(text)
        except ValueError:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú."
            )
            return

        data = await state.get_data()
        new_user = data.get("new_user", {})
        new_user["expire"] = expire_value

        await state.update_data(new_user=new_user)
        await state.set_state(UserCreationStates.waiting_for_note)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª: ")

    async def _process_new_user_note(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        note = "" if text.strip().lower() in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"} else text.strip()

        data = await state.get_data()
        new_user = data.get("new_user", {})
        username = new_user.get("username")

        if not username:
            await self._cancel_operation(message, state, "users")
            return

        new_user["note"] = note

        if new_user.get("data_limit") is None:
            new_user["data_limit"] = 0
        if new_user.get("data_limit_reset_strategy") is None:
            new_user["data_limit_reset_strategy"] = "no_reset"

        try:
            await self.marzban_client.create_user(new_user)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await self._cancel_operation(message, state, "users")
            return

        await state.clear()
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        await self._send_user_details_message(message, username)

    async def _process_user_search_input(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        username = text.strip()
        if not username:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")
            return

        try:
            user = await self.marzban_client.get_user(username)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return

        await state.clear()
        await self._send_user_details_message(message, username)

    async def _process_admin_search_input(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        username = text.strip()
        if not username:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")
            return

        try:
            admin = await self.marzban_client.get_admin(username)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        if not admin:
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return

        await state.clear()
        await self._send_admin_details_message(message, username, 0)

    async def _process_new_admin_username(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        username = text.strip()
        if not username:
            await message.answer("–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        try:
            existing = await self.marzban_client.get_admin(username)
            if existing:
                await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
                return
        except Exception:
            # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π 404 - –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

        await state.update_data(new_admin={"username": username})
        await state.set_state(AdminCreationStates.waiting_for_password)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")

    async def _process_new_admin_password(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        password = text.strip()
        if not password:
            await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return

        data = await state.get_data()
        new_admin = data.get("new_admin", {})
        new_admin["password"] = password
        await state.update_data(new_admin=new_admin)
        await state.set_state(AdminCreationStates.waiting_for_is_sudo)
        await message.answer("–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º? (–¥–∞/–Ω–µ—Ç):")

    async def _process_new_admin_is_sudo(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        data = await state.get_data()
        new_admin = data.get("new_admin", {})

        try:
            is_sudo = self._parse_bool_input(text)
            if is_sudo is None:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:")
            return

        new_admin["is_sudo"] = is_sudo
        await state.update_data(new_admin=new_admin)
        await state.set_state(AdminCreationStates.waiting_for_telegram_id)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")

    async def _process_new_admin_telegram(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        cleaned = text.strip()
        telegram_id = None
        if cleaned.lower() not in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            if not cleaned.isdigit():
                await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
                return
            telegram_id = int(cleaned)

        data = await state.get_data()
        new_admin = data.get("new_admin", {})
        username = new_admin.get("username")
        password = new_admin.get("password")
        is_sudo = new_admin.get("is_sudo")

        if not username or password is None or is_sudo is None:
            await self._cancel_operation(message, state, "admins")
            return

        payload = {
            "username": username,
            "password": password,
            "is_sudo": is_sudo,
        }
        if telegram_id:
            payload["telegram_id"] = telegram_id

        try:
            await self.marzban_client.create_admin(payload)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await self._cancel_operation(message, state, "admins")
            return

        await state.clear()
        await message.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω.")
        await self._send_admin_details_message(message, username, 0)

    async def _process_admin_edit_password(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        data = await state.get_data()
        context = data.get("edit_admin")
        if not context:
            await self._cancel_operation(message, state, "admins")
            return

        password = text.strip()
        if password and len(password) < 4:
            await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return

        if password:
            context.setdefault("changes", {})["password"] = password

        await state.update_data(edit_admin=context)
        await state.set_state(AdminEditStates.waiting_for_is_sudo)
        await message.answer(
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞: {}\n–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞? (–¥–∞/–Ω–µ—Ç/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)".format(
                "–¥–∞" if context.get("current", {}).get("is_sudo") else "–Ω–µ—Ç"
            )
        )

    async def _process_admin_edit_is_sudo(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        data = await state.get_data()
        context = data.get("edit_admin")
        if not context:
            await self._cancel_operation(message, state, "admins")
            return

        current_value = context.get("current", {}).get("is_sudo", False)
        try:
            new_value = self._parse_bool_input(text, current=current_value)
            if new_value is None:
                new_value = current_value
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª, ¬´–Ω–µ—Ç¬ª –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
            return

        context.setdefault("changes", {})["is_sudo"] = new_value
        await state.update_data(edit_admin=context)
        await state.set_state(AdminEditStates.waiting_for_telegram_id)
        telegram_id = context.get("current", {}).get("telegram_id")
        telegram_text = telegram_id if telegram_id else "‚Äî"
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π Telegram ID: {telegram_text}. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π ID –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
        )

    async def _process_admin_edit_telegram(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "admins")
            return

        data = await state.get_data()
        context = data.get("edit_admin")
        if not context:
            await self._cancel_operation(message, state, "admins")
            return

        cleaned = text.strip()
        if cleaned.lower() in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            telegram_id = context.get("current", {}).get("telegram_id")
        else:
            if not cleaned.isdigit():
                await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
                return
            telegram_id = int(cleaned)

        context.setdefault("changes", {})["telegram_id"] = telegram_id
        await state.update_data(edit_admin=context)
        await self._apply_admin_edit_changes(message, state)

    async def _apply_admin_edit_changes(self, message: Message, state: FSMContext):
        data = await state.get_data()
        context = data.get("edit_admin") or {}
        username = context.get("username")
        page = context.get("page", 0)
        changes = context.get("changes", {})

        if not username:
            await self._cancel_operation(message, state, "admins")
            return

        payload: Dict[str, Any] = {}

        if "password" in changes:
            payload["password"] = changes["password"]
        if "is_sudo" in changes:
            payload["is_sudo"] = changes["is_sudo"]
        else:
            payload["is_sudo"] = context.get("current", {}).get("is_sudo", False)
        if "telegram_id" in changes:
            payload["telegram_id"] = changes["telegram_id"]

        try:
            await self.marzban_client.modify_admin(username, payload)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        await state.clear()
        await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await self._send_admin_details_message(message, username, page)

    async def _process_mass_hours_input(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        try:
            hours = int(text.strip())
            if hours == 0:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è) –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")
            return

        await state.clear()
        updated, errors = await self._bulk_add_hours(hours)
        await message.answer(
            f"‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–æ {hours} —á –ø–æ–¥–ø–∏—Å–∫–∏ {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            + (f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}" if errors else "")
        )
        await self._show_users_menu_from_message(message)

    async def _process_mass_traffic_input(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        try:
            amount = float(text.replace(",", "."))
            if amount == 0:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ë –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ) –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")
            return

        await state.clear()
        updated, errors = await self._bulk_add_traffic(amount)
        await message.answer(
            f"üíΩ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ì–ë {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            + (f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}" if errors else "")
        )
        await self._show_users_menu_from_message(message)

    async def _process_broadcast_message(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        content = text.strip()
        if not content:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª:")
            return

        await state.clear()
        sent, failed = await self._send_broadcast(message, content)
        await message.answer(
            f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}.")
        await self._show_users_menu_from_message(message)

    async def _show_users_menu_from_message(self, message: Message):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_users_keyboard()
        )

    async def _bulk_add_hours(self, hours: int) -> tuple[int, int]:
        offset = 0
        limit = max(50, self.users_page_limit)
        updated = 0
        errors = 0

        while True:
            response = await self.marzban_client.get_users(offset=offset, limit=limit)
            users = response.get("users", [])
            if not users:
                break

            for user in users:
                expire = user.get("expire")
                username = user.get("username")
                if not username or not expire:
                    continue
                try:
                    new_expire = int(expire) + hours * 3600
                    await self.marzban_client.modify_user(username, {"expire": new_expire})
                    updated += 1
                except Exception as e:
                    errors += 1
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å expire –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

            offset += len(users)
            total = response.get("total", offset)
            if offset >= total:
                break

        return updated, errors

    async def _bulk_add_traffic(self, amount_gb: float) -> tuple[int, int]:
        offset = 0
        limit = max(50, self.users_page_limit)
        updated = 0
        errors = 0
        delta_bytes = int(amount_gb * (1024 ** 3))

        while True:
            response = await self.marzban_client.get_users(offset=offset, limit=limit)
            users = response.get("users", [])
            if not users:
                break

            for user in users:
                username = user.get("username")
                data_limit = user.get("data_limit")
                if not username or not data_limit:
                    continue
                try:
                    new_limit = int(data_limit) + delta_bytes
                    await self.marzban_client.modify_user(username, {"data_limit": max(new_limit, 0)})
                    updated += 1
                except Exception as e:
                    errors += 1
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

            offset += len(users)
            total = response.get("total", offset)
            if offset >= total:
                break

        return updated, errors

    async def _send_broadcast(self, message: Message, content: str) -> tuple[int, int]:
        users = await self.user_service.get_all_users()
        bot = message.bot
        sent = 0
        failed = 0

        for user in users:
            if not user.telegram_id:
                continue
            try:
                await bot.send_message(user.telegram_id, content)
                sent += 1
            except Exception as e:
                failed += 1
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user.telegram_id}: {e}")

        return sent, failed


    async def _process_user_edit_status(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        data = await state.get_data()
        context = data.get("edit_user")
        if not context:
            await self._cancel_operation(message, state, "users")
            return

        cleaned = text.strip().lower()
        allowed = {"active", "on_hold", "disabled"}

        if cleaned in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            new_status = context.get("current", {}).get("status", "active")
        elif cleaned in allowed:
            new_status = cleaned
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤: active, on_hold –∏–ª–∏ disabled (–∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).")
            return

        context.setdefault("changes", {})["status"] = new_status
        await state.update_data(edit_user=context)
        await state.set_state(UserEditStates.waiting_for_limit)

        current_limit = context.get("current", {}).get("data_limit")
        await message.answer(
            "–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –≤ –ì–ë (0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(
                self._format_data_limit(current_limit)
            )
        )

    async def _process_user_edit_limit(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        data = await state.get_data()
        context = data.get("edit_user")
        if not context:
            await self._cancel_operation(message, state, "users")
            return

        cleaned = text.strip().lower()
        if cleaned in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            limit_bytes = context.get("current", {}).get("data_limit")
        else:
            try:
                limit_bytes = self._parse_data_limit_input(text)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")
                return

        context.setdefault("changes", {})["data_limit"] = limit_bytes
        context["working_limit"] = limit_bytes
        await state.update_data(edit_user=context)
        await state.set_state(UserEditStates.waiting_for_reset_strategy)

        current_strategy = context.get("current", {}).get("data_limit_reset_strategy") or "no_reset"
        await message.answer(
            "–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞: {}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (daily/weekly/monthly/no_reset) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(
                self._format_reset_strategy(current_strategy)
            )
        )

    async def _process_user_edit_reset_strategy(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        data = await state.get_data()
        context = data.get("edit_user")
        if not context:
            await self._cancel_operation(message, state, "users")
            return

        cleaned = text.strip().lower()
        strategy_map = {
            "daily": "daily",
            "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily",
            "weekly": "weekly",
            "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "weekly",
            "monthly": "monthly",
            "–µ–∂–µ–º–µ—Å—è—á–Ω–æ": "monthly",
            "no_reset": "no_reset",
            "–±–µ–∑ —Å–±—Ä–æ—Å–∞": "no_reset",
            "skip": None,
            "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å": None,
            "": None,
        }

        strategy = strategy_map.get(cleaned)
        if strategy is None and cleaned not in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: daily, weekly, monthly, no_reset –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return

        if strategy is not None:
            context.setdefault("changes", {})["data_limit_reset_strategy"] = strategy
        elif "data_limit_reset_strategy" not in context.get("changes", {}):
            context.setdefault("changes", {})["data_limit_reset_strategy"] = context.get("current", {}).get("data_limit_reset_strategy")

        await state.update_data(edit_user=context)
        await state.set_state(UserEditStates.waiting_for_expire)

        current_expire = context.get("current", {}).get("expire")
        await message.answer(
            "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(
                self._format_expire(current_expire)
            )
        )

    async def _process_user_edit_expire(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        data = await state.get_data()
        context = data.get("edit_user")
        if not context:
            await self._cancel_operation(message, state, "users")
            return

        cleaned = text.strip().lower()
        if cleaned in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
            expire_value = context.get("current", {}).get("expire")
        else:
            try:
                expire_value = self._parse_expire_input(text)
            except ValueError:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú).")
                return

        context.setdefault("changes", {})["expire"] = expire_value
        await state.update_data(edit_user=context)
        await state.set_state(UserEditStates.waiting_for_note)
        current_note = context.get("current", {}).get("note") or "‚Äî"
        await message.answer(
            "–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(current_note)
        )

    async def _process_user_edit_note(self, message: Message, state: FSMContext):
        text = message.text or ""
        if self._is_cancel_message(text):
            await self._cancel_operation(message, state, "users")
            return

        data = await state.get_data()
        context = data.get("edit_user")
        if not context:
            await self._cancel_operation(message, state, "users")
            return

        note = "" if text.strip().lower() in {"", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"} else text.strip()
        context.setdefault("changes", {})["note"] = note
        await state.update_data(edit_user=context)
        await self._apply_user_edit_changes(message, state)

    async def _apply_user_edit_changes(self, message: Message, state: FSMContext):
        data = await state.get_data()
        context = data.get("edit_user") or {}
        username = context.get("username")
        page = context.get("page", 0)
        changes = context.get("changes", {})

        if not username:
            await self._cancel_operation(message, state, "users")
            return

        payload: Dict[str, Optional[Any]] = {}

        if "status" in changes:
            payload["status"] = changes["status"]
        if "data_limit" in changes:
            payload["data_limit"] = changes["data_limit"]
        if "data_limit_reset_strategy" in changes:
            payload["data_limit_reset_strategy"] = changes["data_limit_reset_strategy"]
        if "expire" in changes:
            payload["expire"] = changes["expire"]
        if "note" in changes:
            payload["note"] = changes["note"]

        try:
            await self.marzban_client.modify_user(username, payload)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        await state.clear()
        await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await self._send_user_details_message(message, username, page)

    async def _confirm_user_deletion(self, callback: CallbackQuery, state: FSMContext, username: str, page: int):
        await state.update_data(pending_delete_user={"username": username, "page": page})
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <code>{}</code>\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ.".format(html.escape(username)),
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard("delete_user", f"{username}:{page}")
        )
        await callback.answer()

    async def _delete_user(self, callback: CallbackQuery, state: FSMContext, username: str, page: int):
        try:
            await self.marzban_client.delete_user(username)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return

        await state.clear()
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        await self._show_users_list(callback, page)

    async def _cancel_delete_user(self, callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        context = data.get("pending_delete_user")
        await state.update_data(pending_delete_user=None)
        if context:
            username = context.get("username")
            page = context.get("page", 0)
            await self._show_user_details(callback, username, page)
        else:
            await self._show_users_menu(callback)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

    async def _confirm_admin_deletion(self, callback: CallbackQuery, state: FSMContext, username: str, page: int):
        await state.update_data(pending_delete_admin={"username": username, "page": page})
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> <code>{}</code>\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ.".format(html.escape(username)),
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard("delete_admin", username)
        )
        await callback.answer()

    async def _delete_admin(self, callback: CallbackQuery, state: FSMContext, username: str):
        data = await state.get_data()
        context = data.get("pending_delete_admin")
        page = context.get("page", 0) if context else 0
        try:
            await self.marzban_client.delete_admin(username)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        await state.clear()
        await callback.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
        await self._show_admins_list(callback, page)

    async def _cancel_delete_admin(self, callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        context = data.get("pending_delete_admin")
        await state.update_data(pending_delete_admin=None)
        if context:
            username = context.get("username")
            page = context.get("page", 0)
            await self._show_admin_details(callback, username, page)
        else:
            await self._show_admins_menu(callback)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


    def _format_ticket_details_for_admin(self, ticket) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        created = ticket.created_at.strftime('%d.%m.%Y %H:%M') if ticket.created_at else '‚Äî'
        updated = ticket.updated_at.strftime('%d.%m.%Y %H:%M') if ticket.updated_at else '‚Äî'
        status_icon = 'üü¢' if ticket.status == 'open' else 'üî¥'
        user_name = html.escape(ticket.user_name) if ticket.user_name else '‚Äî'
        message_text = html.escape(ticket.message or '‚Äî')
        response_text = html.escape(ticket.response or '‚Äî')

        details = [
            f"<b>–¢–∏–∫–µ—Ç #{ticket.id}</b>",
            f"{status_icon} –°—Ç–∞—Ç—É—Å: <b>{ticket.status.upper()}</b>",
            f"üë§ Telegram ID: <code>{ticket.user_id}</code>",
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}",
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created}",
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {updated}",
            "",
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:",
            message_text,
        ]

        if ticket.response:
            details.extend(["", "üì£ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", response_text])

        return "\n".join(details)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def _show_system_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.marzban_client.get_system_stats()

            cores = stats.get('cores', 1)
            cpu_usage = stats.get('cpu_usage', 0)
            ram_usage = stats.get('ram_usage', 0)
            ram_total = stats.get('ram_total', 1)
            ram_usage_percent = (ram_usage / ram_total) * 100

            message = (
                "üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üñ•Ô∏è **–¶–ü:** {cores} —è–¥–µ—Ä\n"
                f"üìà **–ó–∞–≥—Ä—É–∑–∫–∞ –¶–ü:** {cpu_usage:.1f}%\n"
                f"üíæ **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–ó–£:** {ram_usage / 1024 / 1024:.1f} –ú–ë ({ram_usage_percent:.1f}%)\n"
                f"üÜì **–î–æ—Å—Ç—É–ø–Ω–æ –û–ó–£:** {(ram_total - ram_usage) / 1024 / 1024:.1f} –ú–ë\n"
                f"üîΩ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞:** {stats.get('total_traffic', 0) / (1024 ** 3):.2f} –ì–ë\n\n"
                f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats.get('total_users', 0)}\n"
                f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats.get('active_users', 0)}\n"
                f"‚è∏Ô∏è **–í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è:** {stats.get('on_hold_users', 0)}\n"
                f"üî¥ **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats.get('disabled_users', 0)}"
            )

            await callback.message.edit_text(message, parse_mode="Markdown")

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def _show_users_menu(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        await callback.message.edit_text(
            "üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
            parse_mode="Markdown",
            reply_markup=get_admin_users_keyboard()
        )
        await callback.answer()

    async def _show_admins_menu(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        await callback.message.edit_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ",
            parse_mode="Markdown",
            reply_markup=get_admin_admins_keyboard()
        )
        await callback.answer()

    async def _show_users_list(self, callback: CallbackQuery, page: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            per_page = self.users_page_limit
            offset = page * per_page
            response = await self.marzban_client.get_users(offset=offset, limit=per_page + 1)
            users = response.get("users", [])

            if not users and page > 0:
                await self._show_users_list(callback, page - 1)
                return

            has_next = len(users) > per_page
            display_users = users[:per_page]

            if not display_users:
                await callback.message.edit_text(
                    "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=get_admin_users_keyboard()
                )
                await callback.answer()
                return

            total = response.get("total", offset + len(display_users) + (1 if has_next else 0))
            current_from = offset + 1
            current_to = offset + len(display_users)

            lines = ["<b>üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", ""]
            for user in display_users:
                username = html.escape(user.get("username", "N/A"))
                status = self._format_status(user.get("status"))
                expire_text = self._format_expire(user.get("expire"))
                lines.append(f"<b>{status}</b> ‚Äî <code>{username}</code>")
                lines.append(f"‚è≥ {expire_text}")
                lines.append("")

            lines.append(
                f"–ü–æ–∫–∞–∑–∞–Ω—ã {current_from}‚Äì{current_to} –∏–∑ {total}"
            )

            keyboard_rows: List[List[InlineKeyboardButton]] = []
            for user in display_users:
                username = user.get("username", "")
                keyboard_rows.append([
                    InlineKeyboardButton(
                        text=f"‚ÑπÔ∏è {username}",
                        callback_data=f"users_view:{username}:{page}"
                    )
                ])

            nav_buttons: List[InlineKeyboardButton] = []
            if page > 0:
                nav_buttons.append(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_list:{page - 1}")
                )
            if has_next:
                nav_buttons.append(
                    InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"users_list:{page + 1}")
                )
            if nav_buttons:
                keyboard_rows.append(nav_buttons)

            keyboard_rows.append([
                InlineKeyboardButton(text="üîô –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")
            ])

            await callback.message.edit_text(
                "\n".join(lines),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            )
            await callback.answer()
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    async def _compose_user_details(self, username: str, page: int) -> Optional[tuple[str, InlineKeyboardMarkup]]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = await self.marzban_client.get_user(username)
        if not user:
            return None

        tg_user = await self.user_service.get_user_by_marzban_username(username)
        telegram_id = None
        if tg_user and tg_user.telegram_id:
            telegram_id = tg_user.telegram_id
        elif user.get("telegram_id"):
            telegram_id = user.get("telegram_id")

        data_limit = self._format_data_limit(user.get("data_limit"))
        reset_strategy = self._format_reset_strategy(user.get("data_limit_reset_strategy"))
        expire = self._format_expire(user.get("expire"))
        note = html.escape(user.get("note") or "‚Äî")
        status = self._format_status(user.get("status"))
        protocols = ", ".join(user.get("proxies", {}).keys()) or "‚Äî"

        lines = [
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>",
            "",
            f"üë§ <code>{html.escape(username)}</code>",
            f"üìå –°—Ç–∞—Ç—É—Å: <b>{status}</b>",
        ]

        if telegram_id:
            lines.append(f"üÜî Telegram ID: <code>{telegram_id}</code>")
        else:
            lines.append("üÜî Telegram ID: ‚Äî")

        lines.extend([
            f"üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {data_limit}",
            f"‚ôªÔ∏è –°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞: {reset_strategy}",
            f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expire}",
            f"üõ† –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {protocols}",
            f"üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}",
        ])

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"users_edit:{username}:{page}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"users_delete:{username}:{page}"
                    )
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"users_list:{page}"),
                    InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="admin_users")
                ]
            ]
        )

        return "\n".join(lines), keyboard

    async def _show_user_details(self, callback: CallbackQuery, username: str, page: int):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            result = await self._compose_user_details(username, page)
            if not result:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                await self._show_users_list(callback, max(page - 1, 0))
                return

            text, keyboard = result
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            await callback.answer()
        except Exception as e:
            logger.error(f"Error showing user details: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

    async def _send_user_details_message(self, message: Message, username: str, page: int = 0):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ FSM"""
        result = await self._compose_user_details(username, page)
        if not result:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=get_admin_users_keyboard()
            )
            return

        text, keyboard = result
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    async def _start_user_creation(self, callback: CallbackQuery, state: FSMContext):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await state.set_state(UserCreationStates.waiting_for_username)
        await state.update_data(new_user={"page": 0})
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.",
            parse_mode="HTML"
        )
        await callback.answer()

    async def _start_user_edit(self, callback: CallbackQuery, state: FSMContext, username: str, page: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.marzban_client.get_user(username)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await self._show_users_list(callback, max(page - 1, 0))
            return

        current_data = {
            "status": user.get("status"),
            "data_limit": user.get("data_limit"),
            "data_limit_reset_strategy": user.get("data_limit_reset_strategy"),
            "expire": user.get("expire"),
            "note": user.get("note"),
        }

        await state.update_data(
            edit_user={
                "username": username,
                "page": page,
                "current": current_data,
                "changes": {}
            }
        )
        await state.set_state(UserEditStates.waiting_for_status)
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <code>{}</code>\n\n"
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (active/on_hold/disabled) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(
                html.escape(username),
                self._format_status(current_data.get("status"))
            ),
            parse_mode="HTML"
        )
        await callback.answer()

    async def _start_admin_creation(self, callback: CallbackQuery, state: FSMContext):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        await state.set_state(AdminCreationStates.waiting_for_username)
        await state.update_data(new_admin={})
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.",
            parse_mode="HTML"
        )
        await callback.answer()

    async def _start_admin_edit(self, callback: CallbackQuery, state: FSMContext, username: str, page: int):
        admin = await self.marzban_client.get_admin(username)
        if not admin:
            await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await self._show_admins_list(callback, max(page - 1, 0))
            return

        current = {
            "is_sudo": admin.get("is_sudo", False),
            "telegram_id": admin.get("telegram_id"),
        }

        await state.update_data(
            edit_admin={
                "username": username,
                "page": page,
                "current": current,
                "changes": {}
            }
        )
        await state.set_state(AdminEditStates.waiting_for_password)
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> <code>{}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.".format(html.escape(username)),
            parse_mode="HTML"
        )
        await callback.answer()

    async def _show_admins_list(self, callback: CallbackQuery, page: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            per_page = self.admins_page_limit
            offset = page * per_page
            admins = await self.marzban_client.get_admins(offset=offset, limit=per_page + 1)

            if not admins and page > 0:
                await self._show_admins_list(callback, page - 1)
                return

            has_next = len(admins) > per_page
            display_admins = admins[:per_page]

            if not display_admins:
                await callback.message.edit_text(
                    "üì≠ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=get_admin_admins_keyboard()
                )
                await callback.answer()
                return

            current_from = offset + 1
            current_to = offset + len(display_admins)
            total = offset + len(display_admins) + (1 if has_next else 0)

            lines = ["<b>üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>", ""]
            for admin in display_admins:
                username = html.escape(admin.get("username", "N/A"))
                role = "üîß –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if admin.get("is_sudo") else "üë§ –ê–¥–º–∏–Ω"
                lines.append(f"{role}: <code>{username}</code>")
                telegram_id = admin.get("telegram_id")
                if telegram_id:
                    lines.append(f"üÜî Telegram ID: <code>{telegram_id}</code>")
                lines.append("")

            lines.append(f"–ü–æ–∫–∞–∑–∞–Ω—ã {current_from}‚Äì{current_to} –∏–∑ {total}")

            keyboard_rows: List[List[InlineKeyboardButton]] = []
            for admin in display_admins:
                username = admin.get("username", "")
                keyboard_rows.append([
                    InlineKeyboardButton(
                        text=f"‚ÑπÔ∏è {username}",
                        callback_data=f"admin_manage:{username}:{page}"
                    )
                ])

            nav_buttons: List[InlineKeyboardButton] = []
            if page > 0:
                nav_buttons.append(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admins_list:{page - 1}")
                )
            if has_next:
                nav_buttons.append(
                    InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admins_list:{page + 1}")
                )
            if nav_buttons:
                keyboard_rows.append(nav_buttons)

            keyboard_rows.append([
                InlineKeyboardButton(text="üîô –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_admins")
            ])

            await callback.message.edit_text(
                "\n".join(lines),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            )
            await callback.answer()
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")

    async def _show_nodes_list(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É–∑–ª–æ–≤"""
        try:
            nodes = await self.marzban_client.get_nodes()

            message = "üåê **–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤**\n\n"
            for node in nodes:
                status = "üü¢ –û–Ω–ª–∞–π–Ω" if node.get('status', 'healthy') == 'healthy' else "üî¥ –û—Ñ–ª–∞–π–Ω"
                message += f"{status} {node.get('name', 'N/A')}\n"
                message += f"   üìç {node.get('address', 'N/A')}\n"
                message += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {node.get('user_count', 0)}\n\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown"
            )

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤: {str(e)}")

    async def _compose_admin_details(self, username: str, page: int) -> Optional[tuple[str, InlineKeyboardMarkup]]:
        admin = await self.marzban_client.get_admin(username)
        if not admin:
            return None

        role_text = "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if admin.get("is_sudo") else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        telegram_id = admin.get("telegram_id")
        users_usage = admin.get("users_usage")

        lines = [
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ</b>",
            "",
            f"üë§ <code>{html.escape(username)}</code>",
            f"üîß –†–æ–ª—å: <b>{role_text}</b>",
        ]

        if telegram_id:
            lines.append(f"üÜî Telegram ID: <code>{telegram_id}</code>")
        else:
            lines.append("üÜî Telegram ID: ‚Äî")

        if users_usage is not None:
            lines.append(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {users_usage}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"admins_edit:{username}:{page}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"admins_delete:{username}:{page}"
                    )
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"admins_list:{page}"),
                    InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="admin_admins")
                ]
            ]
        )

        return "\n".join(lines), keyboard

    async def _show_admin_details(self, callback: CallbackQuery, username: str, page: int):
        try:
            result = await self._compose_admin_details(username, page)
            if not result:
                await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                await self._show_admins_list(callback, max(page - 1, 0))
                return

            text, keyboard = result
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)

    async def _send_admin_details_message(self, message: Message, username: str, page: int = 0):
        result = await self._compose_admin_details(username, page)
        if not result:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_admins_keyboard()
            )
            return

        text, keyboard = result
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
