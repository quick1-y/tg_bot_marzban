# presentation/handlers/user_handlers.py
import logging
from typing import Optional
from aiogram import F
from aiogram.types import (
    Message,
    CallbackQuery,
    LabeledPrice,
    PreCheckoutQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from presentation.handlers.base import BaseHandler
from presentation.keyboards.user_keyboards import get_user_main_keyboard
from presentation.keyboards.support_keyboards import (
    get_user_support_menu_keyboard,
    get_user_tickets_list_keyboard,
)
from domain.services.subscription_service import SubscriptionService
from domain.services.user_service import UserService
from domain.services.support_service import SupportService
from domain.models.subscription import SubscriptionResult
from core.config import config
import datetime


logger = logging.getLogger(__name__)


# === helpers ===
def build_welcome_message(support_text: str) -> str:
    return (
        "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n\n"
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"‚Ä¢ üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è ‚Äî {config.STAR_PRICE_PER_MONTH}‚≠ê/–º–µ—Å\n"
        f"‚Ä¢ üíæ –ü–æ —Ç—Ä–∞—Ñ–∏–∫—É ‚Äî {config.STAR_PRICE_PER_GB}‚≠ê/–ì–ë\n\n"
        f"{support_text}"
    )


# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class PurchaseStates(StatesGroup):
    choosing_plan_type = State()
    choosing_months = State()
    choosing_traffic = State()

class SupportStates(StatesGroup):
    waiting_for_message = State()
    viewing_tickets = State()
    viewing_ticket_detail = State()

# === helper ===
def detect_subscription_type(subscription_info) -> Optional[str]:
    if not subscription_info:
        return None
    for attr in ("data_limit_gb", "data_limit"):
        val = getattr(subscription_info, attr, None)
        if val:
            try:
                if isinstance(val, (int, float)) and val > 0:
                    return "traffic"
            except Exception:
                pass
    stype = getattr(subscription_info, "subscription_type", "") or ""
    st_lower = str(stype).lower()
    if "–º–µ—Å—è—Ü" in st_lower or "monthly" in st_lower:
        return "monthly"
    if "–≥–±" in st_lower or "gb" in st_lower or "—Ç—Ä–∞—Ñ–∏–∫" in st_lower:
        return "traffic"
    return None


class UserHandlers(BaseHandler):
    def __init__(self, subscription_service: SubscriptionService, user_service: UserService, support_service: SupportService):
        self.subscription_service = subscription_service
        self.user_service = user_service
        self.support_service = support_service
        super().__init__()

    def _register_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.start, CommandStart())

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
        self.router.callback_query.register(self.show_plan_options, F.data == "buy_subscription")
        self.router.callback_query.register(self.handle_choose_monthly, F.data == "choose_monthly")
        self.router.callback_query.register(self.handle_choose_traffic, F.data == "choose_traffic")
        self.router.callback_query.register(self.handle_my_subscription, F.data == "my_subscription")
        self.router.callback_query.register(self.handle_back_to_main, F.data.in_(["back_to_main", "back_to_main_from_tickets"]))

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        self.router.callback_query.register(self.open_support_menu, F.data == "open_support")
        self.router.callback_query.register(self.create_support_ticket, F.data == "create_support_ticket")
        self.router.callback_query.register(self.view_my_tickets, F.data == "view_my_tickets")
        self.router.callback_query.register(self.handle_back_to_support_menu, F.data == "back_to_support")
        self.router.callback_query.register(self.open_ticket_detail, F.data.startswith("ticket_"))

        self.router.callback_query.register(self.handle_support, F.data == "support")
        self.router.callback_query.register(self.handle_user_tickets, F.data == "user_support_tickets")
        self.router.callback_query.register(self.handle_user_ticket_view, F.data.startswith("user_view_ticket:"))
        self.router.callback_query.register(self.handle_close_ticket, F.data.startswith("close_ticket:"))

        # FSM
        self.router.message.register(self.handle_months_input, PurchaseStates.choosing_months)
        self.router.message.register(self.handle_traffic_input, PurchaseStates.choosing_traffic)
        self.router.message.register(self.handle_support_message, SupportStates.waiting_for_message)

        # üí≥ –û–ø–ª–∞—Ç–∞ Stars
        self.router.pre_checkout_query.register(self.process_pre_checkout)

    # === /start ===
    async def start(self, message: Message):
        telegram_id = message.from_user.id
        await self.user_service.get_or_create_user(telegram_id)
        welcome_message = build_welcome_message(self.support_service.get_support_contact_info())
        await message.answer(welcome_message, reply_markup=get_user_main_keyboard(telegram_id))

    # === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
    async def open_support_menu(self, callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.edit_text(
            "üÜò –†–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã.",
            reply_markup=get_user_support_menu_keyboard()
        )

    async def create_support_ticket(self, callback: CallbackQuery, state: FSMContext):
        telegram_id = callback.from_user.id
        username = callback.from_user.username or f"user_{telegram_id}"

        tickets = await self.support_service.get_user_tickets(telegram_id)
        open_tickets = [t for t in tickets if t.status == "open"]
        if len(open_tickets) >= self.support_service.MAX_OPEN_TICKETS:
            await callback.message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {len(open_tickets)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                                          reply_markup=get_user_main_keyboard(telegram_id))
            return

        await state.set_state(SupportStates.waiting_for_message)
        await callback.message.edit_text("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    async def handle_support_message(self, message: Message, state: FSMContext):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        text = message.text.strip()

        ticket = await self.support_service.create_support_ticket(user_id, username, text)
        if not ticket:
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_user_main_keyboard(user_id))
            await state.clear()
            return

        msg_for_admin = await self.support_service.format_support_message_for_admin(user_id, username, text)
        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {msg_for_admin}")

        await message.answer(f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ üôå",
                             reply_markup=get_user_main_keyboard(user_id))
        await state.clear()

    async def view_my_tickets(self, callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tickets = await self.support_service.get_user_tickets(user_id)
        msg = await self.support_service.format_ticket_list_for_user(tickets)
        markup = get_user_tickets_list_keyboard(tickets)
        await callback.message.edit_text(msg, reply_markup=markup)

    async def open_ticket_detail(self, callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        ticket_id = int(callback.data.replace("ticket_", ""))
        ticket = await self.support_service.get_ticket_details(ticket_id, user_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            return
        msg = await self.support_service.format_ticket_details(ticket)
        markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_my_tickets")]])
        await callback.message.edit_text(msg, reply_markup=markup)

    async def handle_back_to_support_menu(self, callback: CallbackQuery, state: FSMContext):
        await self.open_support_menu(callback, state)

    # === –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
    async def show_plan_options(self, callback: CallbackQuery, state: FSMContext):
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        await state.clear()
        telegram_id = callback.from_user.id

        result = await self.subscription_service.get_subscription_info(telegram_id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if result.success and result.subscription_info and result.subscription_info.is_active:
            info = result.subscription_info

            # üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            sub_type = "monthly" if info.expire_date else "traffic"
            if getattr(info, "data_limit_gb", 0) and info.data_limit_gb > 0:
                sub_type = "traffic"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = (
                f"üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
                f"üì¶ –¢–∏–ø: {'üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' if sub_type == 'monthly' else 'üíæ –ü–æ —Ç—Ä–∞—Ñ–∏–∫—É'}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info.username}\n"
                f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {info.expire_date or '‚Äî'}\n"
                f"üìé –°—Å—ã–ª–∫–∞: {info.subscription_url or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            )

            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
            if sub_type == "monthly":
                msg += (
                    "‚ö†Ô∏è –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë —Å—Ä–æ–∫.\n"
                    "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                keyboard = [
                    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="choose_monthly")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
                ]

            elif sub_type == "traffic":
                msg += (
                    "‚ö†Ô∏è –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º.\n"
                    "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                keyboard = [
                    [InlineKeyboardButton(text="üíæ –î–æ–∫—É–ø–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="choose_traffic")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
                ]

            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text(msg, reply_markup=markup)
            return

        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏ ({config.STAR_PRICE_PER_MONTH}‚≠ê/–º–µ—Å)",
                    callback_data="choose_monthly",
                ),
                InlineKeyboardButton(
                    text=f"üíæ –ü–æ —Ç—Ä–∞—Ñ–∏–∫—É ({config.STAR_PRICE_PER_GB}‚≠ê/–ì–ë)",
                    callback_data="choose_traffic",
                ),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ])
        await callback.message.edit_text("üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)


    # === –ü–æ–∫—É–ø–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π ===
    async def handle_choose_monthly(self, callback: CallbackQuery, state: FSMContext):
        telegram_id = callback.from_user.id
        cur = await self.subscription_service.get_subscription_info(telegram_id)
        if cur.success and cur.subscription_info and cur.subscription_info.is_active:
            sub_type = detect_subscription_type(cur.subscription_info)
            if sub_type == "traffic":
                await callback.message.answer(
                    "‚ùå –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç—Ä–∞—Ñ–∏–∫–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–∫–∞ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω. "
                    "–î–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=get_user_main_keyboard(telegram_id))
                return

        await state.set_state(PurchaseStates.choosing_months)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]])
        await callback.message.edit_text(
            f"üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
            f"üí∞ –¶–µ–Ω–∞: {config.STAR_PRICE_PER_MONTH}‚≠ê –∑–∞ 1 –º–µ—Å—è—Ü\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12:",
            reply_markup=back_kb,
        )

    # === –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É ===
    async def handle_choose_traffic(self, callback: CallbackQuery, state: FSMContext):
        telegram_id = callback.from_user.id
        cur = await self.subscription_service.get_subscription_info(telegram_id)
        if cur.success and cur.subscription_info and cur.subscription_info.is_active:
            sub_type = detect_subscription_type(cur.subscription_info)
            if sub_type == "monthly":
                await callback.message.answer(
                    "‚ùå –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –¥–æ–∫—É–ø–∏—Ç—å –ì–ë –Ω–µ–ª—å–∑—è –¥–æ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è. "
                    "–î–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=get_user_main_keyboard(telegram_id))
                return

        await state.set_state(PurchaseStates.choosing_traffic)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]])
        await callback.message.edit_text(
            f"üíæ –°–∫–æ–ª—å–∫–æ –ì–ë –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?\n"
            f"üí∞ –¶–µ–Ω–∞: {config.STAR_PRICE_PER_GB}‚≠ê –∑–∞ 1 –ì–ë\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:",
            reply_markup=back_kb,
        )

    # === FSM: –º–µ—Å—è—Ü—ã ===
    async def handle_months_input(self, message: Message, state: FSMContext):
        if not message.text:
            return
        telegram_id = message.from_user.id

        cur = await self.subscription_service.get_subscription_info(telegram_id)
        if cur.success and cur.subscription_info and cur.subscription_info.is_active:
            sub_type = detect_subscription_type(cur.subscription_info)
            if sub_type == "traffic":
                await message.answer("‚ùå –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç—Ä–∞—Ñ–∏–∫–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                await state.clear()
                await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=get_user_main_keyboard(telegram_id))
                return

        try:
            months = int(message.text.strip())
            if not 1 <= months <= 12:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.")
                return

            price = months * config.STAR_PRICE_PER_MONTH
            payload = f"monthly:{months}:{telegram_id}"
            logger.info(f"‚û°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: {months} –º–µ—Å. –∑–∞ {price}‚≠ê")

            await message.answer_invoice(
                title="–ü–æ–¥–ø–∏—Å–∫–∞ VPN",
                description=f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å.\nüíé {price}‚≠ê",
                payload=payload,
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label="VPN –ü–æ–¥–ø–∏—Å–∫–∞", amount=price)],
            )
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.")

    # === FSM: –ì–ë ===
    async def handle_traffic_input(self, message: Message, state: FSMContext):
        if not message.text:
            return
        telegram_id = message.from_user.id

        cur = await self.subscription_service.get_subscription_info(telegram_id)
        if cur.success and cur.subscription_info and cur.subscription_info.is_active:
            sub_type = detect_subscription_type(cur.subscription_info)
            if sub_type == "monthly":
                await message.answer("‚ùå –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –¥–æ–∫—É–ø–∏—Ç—å –ì–ë –Ω–µ–ª—å–∑—è –¥–æ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                await state.clear()
                await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=get_user_main_keyboard(telegram_id))
                return

        try:
            gb = int(message.text.strip())
            if not 1 <= gb <= 100:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
                return

            price = gb * config.STAR_PRICE_PER_GB
            payload = f"traffic:{gb}:{telegram_id}"
            logger.info(f"‚û°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: {gb} –ì–ë –∑–∞ {price}‚≠ê")

            await message.answer_invoice(
                title="VPN –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É",
                description=f"üíæ {gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞\nüíé {price}‚≠ê",
                payload=payload,
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label="VPN –¢—Ä–∞—Ñ–∏–∫", amount=price)],
            )
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã Stars ===
    async def process_pre_checkout(self, query: PreCheckoutQuery):
        payload = query.invoice_payload
        logger.info(f"üí≥ Pre-checkout Stars: {payload}")
        await query.answer(ok=True)

        try:
            plan, value, user_id = payload.split(":")
            user_id = int(user_id)
            value = int(value)

            if plan == "monthly":
                logger.info(f"üïí –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {value} –º–µ—Å. –¥–ª—è {user_id}")
                result = await self.subscription_service.purchase_monthly_subscription(user_id, value)
                plan_name = f"–Ω–∞ {value} –º–µ—Å."
            else:
                logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞: {value} –ì–ë –¥–ª—è {user_id}")
                result = await self.subscription_service.purchase_gb_subscription(user_id, value)
                plan_name = f"{value} –ì–ë"

            if result.success:
                info = result.subscription_info
                from datetime import datetime

                sub_type = "traffic" if getattr(info, "data_limit_gb", 0) else "monthly"
                msg = "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"

                if sub_type == "monthly":
                    expire_dt = info.expire_date
                    expire_str = expire_dt.strftime("%d.%m.%Y %H:%M") if isinstance(expire_dt, datetime) else str(expire_dt)
                    days_left = 0
                    if isinstance(expire_dt, datetime):
                        days_left = max(0, (expire_dt - datetime.utcnow()).days)

                    msg += (
                        f"üìÖ –¢–∏–ø: –ú–µ—Å—è—á–Ω–∞—è\n"
                        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω.\n"
                        f"üìÜ –î–æ: {expire_str}\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info.username}\n"
                        f"üìé –°—Å—ã–ª–∫–∞: {info.subscription_url or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                        f"üíé –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
                    )

                else:
                    used = getattr(info, "used_traffic_gb", 0) or 0
                    total = getattr(info, "data_limit_gb", 0) or 0
                    percent = round((used / total) * 100, 1) if total > 0 else 0

                    msg += (
                        f"üíæ –¢–∏–ø: –ü–æ —Ç—Ä–∞—Ñ–∏–∫—É\n"
                        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used:.2f} –ì–ë / {total:.2f} –ì–ë ({percent}%)\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info.username}\n"
                        f"üìé –°—Å—ã–ª–∫–∞: {info.subscription_url or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                        f"üíé –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
                    )

                await query.bot.send_message(user_id, msg, reply_markup=get_user_main_keyboard(user_id))

            else:
                await query.bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.\n–û—à–∏–±–∫–∞: {result.error_message}",
                )

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")
            await query.bot.send_message(
                query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è."
            )


    # === –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ ===
    async def handle_my_subscription(self, callback: CallbackQuery, state: FSMContext):
        telegram_id = callback.from_user.id
        await state.clear()
        result = await self.subscription_service.get_subscription_info(telegram_id)
        await self._handle_subscription_result(callback, result, telegram_id)

    # === –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ===
    async def handle_back_to_main(self, callback: CallbackQuery, state: FSMContext):
        await state.clear()
        user_id = callback.from_user.id
        welcome_message = build_welcome_message(self.support_service.get_support_contact_info())
        await callback.message.edit_text(welcome_message, reply_markup=get_user_main_keyboard(user_id))

    # === –í—ã–≤–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ ===
    async def _handle_subscription_result(self, callback: CallbackQuery, result: SubscriptionResult, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ."""
        if not result.success or not result.subscription_info:
            await callback.message.edit_text(
                f"‚ùå {result.error_message or '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'}",
                reply_markup=get_user_main_keyboard(user_id)
            )
            return

        info = result.subscription_info
        data_limit = getattr(info, "data_limit_gb", 0) or 0
        sub_type = "traffic" if data_limit > 0 else "monthly"

        # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
        expire = info.expire_date
        if isinstance(expire, str):
            expire_str = expire
            days_left = 0
        else:
            expire_str = expire.strftime("%d.%m.%Y %H:%M") if expire else "‚Äî"
            now = datetime.datetime.utcnow()
            days_left = max(0, (expire - now).days) if expire else 0

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        if sub_type == "monthly":
            msg = (
                f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
                f"üìÖ –¢–∏–ø: –ú–µ—Å—è—á–Ω–∞—è\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω.\n"
                f"üìÜ –î–æ: {expire_str}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{info.username}`\n"
                f"üìé –°—Å—ã–ª–∫–∞: {info.subscription_url or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                f"üíé –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
            )
            buttons = [
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="choose_monthly")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]

        else:
            used = getattr(info, "used_traffic_gb", 0)
            total = getattr(info, "data_limit_gb", 0)
            percent = 0
            if total > 0:
                percent = round((used / total) * 100, 1)
                if percent > 100:
                    percent = 100

            msg = (
                f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É!\n\n"
                f"üíæ –û–±—ä–µ–º: {total:.1f} –ì–ë\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used:.1f} –ì–ë ({percent}%)\n"
                f"üìÜ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if info.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{info.username}`\n"
                f"üìé –°—Å—ã–ª–∫–∞: {info.subscription_url or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                f"üíé –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
            )
            buttons = [
                [InlineKeyboardButton(text="üíæ –î–æ–∫—É–ø–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="choose_traffic")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]

        # --- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
        if getattr(info, "configs", None):
            msg += "\n\nüîå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
            for i, conf in enumerate(info.configs[:3], start=1):
                msg += f"{i}. `{conf}`\n"

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(msg, reply_markup=markup, parse_mode="Markdown")

    # === –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
    async def handle_support(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        from presentation.keyboards.support_keyboards import get_support_keyboard
        await state.clear()
        await callback.message.edit_text(
            "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ.",
            reply_markup=get_support_keyboard()
        )

    @staticmethod
    def _build_ticket_text(ticket) -> str:
        created_at = getattr(ticket, "created_at", None)
        created = created_at.strftime('%d.%m.%Y %H:%M') if created_at else "‚Äî"
        status_open = ticket.status == "open"
        status_icon = "üü¢" if status_open else "üîí"

        text = (
            f"{status_icon} <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n"
            f"üïí {created}\n"
            f"üí¨ {ticket.message}\n"
        )

        if getattr(ticket, "response", None):
            text += f"üì£ –û—Ç–≤–µ—Ç: {ticket.response}\n"

        text += f"üìå –°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç' if status_open else '–ó–∞–∫—Ä—ã—Ç'}"
        return text

    @staticmethod
    def _build_ticket_markup(ticket) -> Optional[InlineKeyboardMarkup]:
        if ticket.status != "open":
            return None

        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_ticket:{ticket.id}")]]
        )

    # === –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è ===
    async def handle_user_tickets(self, callback: CallbackQuery, state: FSMContext):
        from presentation.keyboards.support_keyboards import get_support_keyboard

        await state.clear()
        telegram_id = callback.from_user.id
        tickets = await self.support_service.get_user_tickets(telegram_id)

        if not tickets:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.",
                reply_markup=get_support_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫)
        for ticket in tickets:
            text = self._build_ticket_text(ticket)
            markup = self._build_ticket_markup(ticket)

            await callback.message.answer(text, reply_markup=markup, parse_mode="HTML")

        # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
            reply_markup=get_support_keyboard()
        )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è¬ª
        try:
            await callback.message.delete()
        except Exception:
            pass


    # === –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ ===
    async def handle_user_ticket_view(self, callback: CallbackQuery, state: FSMContext):
        from presentation.keyboards.support_keyboards import get_support_keyboard
        ticket_id = int(callback.data.split(":")[1])
        telegram_id = callback.from_user.id
        tickets = await self.support_service.get_user_tickets(telegram_id)
        ticket = next((t for t in tickets if t.id == ticket_id), None)

        if not ticket:
            await callback.message.edit_text("‚ö†Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_support_keyboard())
            return

        msg = (
            f"üìÑ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{ticket.message}\n\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {'üü¢ –û—Ç–∫—Ä—ã—Ç' if ticket.status == 'open' else 'üî¥ –ó–∞–∫—Ä—ã—Ç'}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_support_tickets")]
        ])
        await callback.message.edit_text(msg, reply_markup=kb)

    # === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç ===
    async def handle_close_ticket(self, callback: CallbackQuery):
        try:
            _, ticket_id_str = callback.data.split(":")
            ticket_id = int(ticket_id_str)
            success = await self.support_service.close_ticket(ticket_id)

            if success:
                ticket = await self.support_service.get_ticket_details(ticket_id, callback.from_user.id)
                if ticket:
                    text = self._build_ticket_text(ticket)
                else:
                    text = (
                        f"üîí <b>–¢–∏–∫–µ—Ç #{ticket_id}</b>\n"
                        "üìå –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç"
                    )
                await callback.message.edit_text(text, parse_mode="HTML")
                await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
            else:
                await callback.answer(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç #{ticket_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–∫—Ä—ã—Ç.",
                    show_alert=True
                )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.", show_alert=True)
