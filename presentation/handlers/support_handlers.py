# presentation/handlers/support_handlers.py
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from presentation.handlers.base import BaseHandler
from presentation.keyboards import (
    get_support_keyboard,
    get_support_confirmation_keyboard,
    get_user_main_keyboard
)
from domain.services.support_service import SupportService
from core.security import can_access_support_tickets
from core.config import config
import logging

logger = logging.getLogger(__name__)


class SupportStates(StatesGroup):
    waiting_for_support_message = State()
    confirming_support_message = State()


class SupportHandlers(BaseHandler):
    def __init__(self, support_service: SupportService):
        self.support_service = support_service
        super().__init__()

    def _register_handlers(self):
        self.router.callback_query.register(self.support_menu_handler, F.data == "support")
        self.router.callback_query.register(self.write_to_support_handler, F.data == "write_to_support")
        self.router.message.register(self.support_message_handler, SupportStates.waiting_for_support_message)
        self.router.callback_query.register(self.support_confirmation_handler, SupportStates.confirming_support_message)

    async def support_menu_handler(self, callback: CallbackQuery):
        """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        await callback.message.edit_text(
            "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ —Ç.–ø.",
            reply_markup=get_support_keyboard()
        )

    async def write_to_support_handler(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await callback.message.edit_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:"
        )
        await state.set_state(SupportStates.waiting_for_support_message)

    async def support_message_handler(self, message: Message, state: FSMContext):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_message = message.text
        user = message.from_user

        if not user_message or len(user_message.strip()) < 5:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return

        await state.update_data(
            support_message=user_message,
            user_name=user.full_name,
            user_id=user.id
        )

        await message.answer(
            f"üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_message}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=get_support_confirmation_keyboard()
        )
        await state.set_state(SupportStates.confirming_support_message)

    async def support_confirmation_handler(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        data = callback.data
        state_data = await state.get_data()

        if not state_data:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        if data == "confirm_support":
            user_id = state_data['user_id']
            user_name = state_data['user_name']
            message_text = state_data['support_message']

            try:
                ticket = await self.support_service.create_support_ticket(user_id, user_name, message_text)
                admin_message = await self.support_service.format_support_message_for_admin(user_id, user_name, message_text)

                recipients = set(config.ADMIN_TG_IDS + config.SUPPORT_TG_IDS)
                for recipient in recipients:
                    try:
                        await callback.bot.send_message(chat_id=recipient, text=admin_message)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–ø–ø–æ—Ä—Ç—É {recipient}: {e}")

                await callback.message.edit_text(
                    f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}",
                    reply_markup=get_user_main_keyboard(user_id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_user_main_keyboard(callback.from_user.id)
                )

        elif data == "edit_support":
            await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:")
            await state.set_state(SupportStates.waiting_for_support_message)

        elif data == "cancel_support":
            await callback.message.edit_text(
                "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_user_main_keyboard(callback.from_user.id)
            )

        await state.clear()

    async def show_all_support_tickets(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = callback.from_user.id

        if not can_access_support_tickets(user_id):
            await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏", show_alert=True)
            return

        try:
            tickets = await self.support_service.get_all_tickets()
            if not tickets:
                await callback.message.edit_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
                return

            message = "üìã **–í—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n"
            for ticket in tickets[:10]:
                status_icon = "üü¢" if ticket.status == "open" else "üî¥"
                user_display = ticket.user_name or f"User {ticket.user_id}"
                message += (
                    f"{status_icon} **#{ticket.id}** ‚Äî {user_display}\n"
                    f"üìù {ticket.message[:60]}...\n\n"
                )

            if len(tickets) > 10:
                message += f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(tickets)} —Ç–∏–∫–µ—Ç–æ–≤\n"

            await callback.message.edit_text(
                message,
                parse_mode="Markdown",
                reply_markup=get_user_main_keyboard(user_id)
            )

        except Exception as e:
            logger.error(f"Error showing all support tickets: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}",
                reply_markup=get_user_main_keyboard(user_id)
            )
